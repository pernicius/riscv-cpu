// Section definition - outputs generated by the .RULE logic
//  - only a single .SIGNALS section is allowed

.OUTPUTS {
    // <num_bits>: <name>[, <default>];    (normal, aktive high)
    // !<num bits>: <name>[, <default>];   (inverted, aktive low)
    // use _UNUSED for any number of bits to be ignored (will be generated as 0's)
    // counting of bits starts at first line with bit 0

    // === Rom0 ===
    1: A_mux;
		// 0 - Rs1 (default)
		// 1 - PC
    1: B_mux;
		// 0 - Rs2 (default)
		// 1 - Imm
    3: Imm_ctrl;
		// 0b000 - R_type
		// 0b001 - I_type
		// 0b010 - S_type
		// 0b011 - B_type
		// 0b100 - U_type
		// 0b101 - J_type
    1: rs1_en;
    1: rs2_en;
    1: rd_en;

    // === Rom1 ===
    2: Mem_mux;
		// 00 - ALU_result (default)
		// 01 - Mem_data
		// 10 - PC_next
		// 11 - (unused)
    1: Mem_rd;
    1: Mem_wr;
    5: ALU_ctrl;
		// 0b0x000 ADD
		// 0b0x100 SUB
		//
		// 0b00001 XOR
		// 0b00101 OR
		// 0b01001 AND
		//
		// 0b00010 SLL
		// 0b01010 SRL
		// 0b01110 SRA
		//
		// 0b0x011 SLT
		// 0b0x111 SLTU

    // === Rom3 ===
		// first bit of Rom3 is last bit of ALU_ctrl
	1: J_JAL;
	1: J_JALR;
	1: Branch;
	3: _UNUSED;
	1: Valid_instr;
}
